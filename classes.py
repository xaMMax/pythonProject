# –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
import json
import os
import subprocess

# –∏–º–ø–æ—Ä—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
import aiofiles.os
import speech_recognition as sr  # –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç —Å –¥–ø–ª—å–Ω–µ–π—à–∏–º –∏–º–µ–Ω–µ–º "sr"
from googletrans import Translator


# —Å–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º
class AudioSave:
    def __init__(self, filename, language="ru-Ru"):
        self.filename = filename
        self.language = language
        self.curr_path = os.path.dirname(__file__)
        self.new_file = (self.filename[:-3] + "wav")

    # –º–µ—Ç–æ–¥ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ .oga –≤ .wav
    def convert_file(self):
        # –∑–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–Ω–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
        if os.path.exists(os.path.abspath(self.filename)) and os.path.exists(self.new_file):
            pass
        else:
            process = subprocess.run(["ffmpeg", "-hide_banner", "-i", (os.path.abspath(self.filename)), self.new_file])
            if process.returncode != 0:
                raise Exception("Something went wrong")

    # –∑–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—à—å—é google speech recognition
    async def recognize_file(self):
        try:
            tlg_audio = sr.AudioFile(os.path.abspath(self.new_file))
            r = sr.Recognizer()
            with tlg_audio as source:
                audio = r.listen(source)
                if self.language is None:
                    self.language = "ru-Ru"
                    text = r.recognize_google(audio, language=self.language)
                    return text
                else:
                    text = r.recognize_google(audio, language=self.language)
                    return text
        except sr.UnknownValueError:
            return "<i>I can`t hear you!\nüôâ</i>"

    # —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤ –ø–∞–ø–∫–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–ª—å—à–µ 100
    @staticmethod
    async def delete_file():
        count = len([i for i in os.scandir("files_voice")])
        if count > 100:
            try:
                for items in [i for i in os.scandir("files_voice")]:
                    await aiofiles.os.remove(items)
                print("")
                return "<i>–ö—ç—à –≤—ã—á–∏—â–µ–Ωüëæ</i>"
            except FileExistsError:
                raise print("–ü–æ—Ä–∞ –ø–æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à")
        else:
            return "<i>–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å –±–ªüëæ</i>"


# —Å–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–∞–º–∏
class LanguageClass:
    def __init__(self, user_id=0, language="ru-Ru"):
        self._language: str = language
        self.user_id: int = user_id
        self.lang_state: dict = {}

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ json —Å–ª–æ–≤–∞—Ä—å –∫–ª—é—á = –∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–Ω–∞—á–µ–Ω–∏–µ = —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    def set_language(self, user_id: int, lang_types: str):
        self.user_id = user_id
        self._language = lang_types
        self.lang_state[user_id] = lang_types
        try:
            with open("states.json", "a+") as file:
                dictionary: dict = json.load(file)
                dictionary[user_id] = lang_types
                json.dump(dictionary, file)
        except json.decoder.JSONDecodeError:
            with open("states.json", "w") as file:
                data = self.lang_state
                json.dump(data, file)

    # –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —è–∑—ã–∫–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∑–∞–¥–∞–Ω–Ω–æ–≥ —Ä–∞–Ω–µ–µ
    @staticmethod
    def get_language(user_id: int):
        try:
            with open("states.json", "r") as file:
                state: dict = json.load(file)
                lang = state.get(str(user_id))
                return lang
        except FileNotFoundError:
            with open("states.json", "w") as file:
                data = {1: "ru-Ru"}
                json.dump(data, file)


class Translate:
    def __init__(self, user_id=0, language_to="en"):
        self.user_id = user_id
        self.language_to = language_to
        pass

    async def translate_text(self, lang_to, text):
        if lang_to == "" or None:
            lang_to = self.language_to
        translator = Translator()
        translate = translator.translate(text, dest=lang_to, src='auto')
        message = f"{translate.text}"
        return message

